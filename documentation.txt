#########################
# PIZZAPY DOCUMENTATION #
#########################


CONTENTS





SECTION: STRUCTURE







SECTION: FOLDER STRUCTURE AND IMPORT
------------------------------------
This program has a 2-layer folder structure. The parent folder 'pizzapy' has the following files
    .gitignore
    __init__.py             
    main.py
    main_script.py
    requirements.txt
    documentation.txt


SECTION: CUSTOM LIBRARIES
--------------------------
    I have custom libraries like batterypy and dimsumpy, in order to use them, they must be at sys.path, so that python programs can import them. site-packages folder is in sys.path (search path), so I must put the custom libraries into site-packages, or create symlinks in site-packages to point to the custom libraries.

    Sometimes, if I need to use modules in the same program, I need to append parent program folder to the sys.path.

        import sys; sys.path.append('..')

    I better keep this program to only 2-layer folder structure to simplify the imports.

    Install custom libraries in virtual environment's site-packages folder:

        step 1: go to site-packages folder
        /Users/chris/github/pizzapy/venv/lib/python3.11/site-packages

        step 2: create symlinks
        ln -s ~/github/batterypy batterypy
        ln -s ~/github/dimsumpy dimsumpy



SECTION: IMPORT
------------------
pasta/
    main.py
    test.py
    subfolder1/
        |-- module1.py
    subfolder2/
        |-- module2a.py
        |-- module2b.py

Inside subfolder's modules like module1.py, I should not use relative imports because relative imports work only when I call them from program folder main.py or test.py, instead I should have the following sys.path line at the top of subfolders' modules, so that I could use if __name__ == '__main__': to test functions of that module

    import sys; sys.path.append('..')

In main.py and test.py, I do not need to have above sys.path line.

SECTION: requirements.txt
---------------------------

    VIRTUAL ENVIRONMENT:
        # will install: pip, setuptools
        # command to create virtual environment: 
        # alias pv='python3 -m venv venv && source venv/bin/activate && pip3 install --upgrade pip && which python3 && python3 -V &&  pip3 -V &&  pip3 list'
        # /Users/chris/github/pizzapy/venv/lib/python3.11/site-packages


    beautifulsoup4
        # beautifulsoup4==4.12
        # will install: beautifulsoup4, soupsieve
        # version 4.12.2 in 2023 AUG; 4 is the major version, 12 is the minor version, 2 is the patch version, it should be compatible for minor version updates like 4.13, 4.14
        # https://pypi.org/project/beautifulsoup4/
        # DOCS: https://www.crummy.com/software/BeautifulSoup/bs4/doc/
        # the BeautifulSoup (ver3) package is the old libray

    
    html5lib
        # html5lib
        # no need to specify version
        # html5lib library is required by pandas.read_html() when the HTML page does not have <table> tag.


    lxml
        # lxml
        # I cannot specify minor version of 4.9 in Apple Silicon, if I specify the version, it cannot be installed despite I input a valid version in Apple Silicon.
        # will install: lxml
        # pandas requires lxml to parse HTML documents, when I install pandas, pandas will not automatically install lxml.
        # NOTE: I have successufully installed lxml on mac mini m1 by just put 'lxml' without version in requirements.txt, and it installed 4.9.3; before I installed lxml by pip, I edit /etc/paths and put /opt/homebrew/opt/llvm/bin/ at the top, so it use homebrew clang compiler. In addition, before I pip install lxml, I also use brew to install libxml2, but I am not sure whether libxml2 helps pip install lxml.
    

    pandas
        # pandas==2.0
        # will install: pandas, numpy, python-dateutil, pytz, six, tzdata
        # version 2.0.3 in 2023 AUG
        # https://pypi.org/project/pandas/
        # DOCS: https://pandas.pydata.org/docs/

    psycopg[binary, pool]
        # psycopg[binary, pool]   
        # if I sepecify the version, it cannot be installed
        # will install: psycopg, psycopg-binary, psycopg-pool, typing_extensions
        # DO NOT directly put psycopg, psycopg-binary, psycopg-pool into requirements.txt, that might not install properly.
        # version 3.1.10 for binary and 3.1.7 for pool in 2023 AUG
        # after I install psycopg[binary, pool], 'psycopg', 'psycopg-binary' and 'psycopg-pool' were installed
        # https://pypi.org/project/psycopg-binary/
        # DOCS: https://www.psycopg.org/psycopg3/docs/

    psycopg2
        # psycopg2
        # no need to specify the version, as it will installed the latest version 2.
        # This psycopg2 library is a prerequisite of SQLAlchemy ver 2, even in 2023.


    PySide6
        # PySide6==6.5
        # will install: PySide6, PySide6-Addons, PySide6-Essentials, shiboken6
        # version 6.5.2 in 2023 AUG
        # https://pypi.org/project/PySide6/
        # DOCS: https://doc.qt.io/qtforpython-6/
        # homepgae: https://wiki.qt.io/Qt_for_Python


    requests
        # requests==2.31
        # will install: requests, certifi, charset-normalizer, idna, urllib3
        # version 2.31.0 in 2023 AUG
        # https://pypi.org/project/requests/
        # DOCS: https://requests.readthedocs.io/en/latest/

    SQLalchemy
        # SQLAlchemy
        # no need to specify the version, it will install version 2.0.XX
        # will install: SQLAlchemy, greenlet
        # pandas.read_sql() function works best with SQLalchemy connection, if I use psycopg connection, the terminal will have warnings.
        # SQLAlchemy v2.0 still depends on psycopg2 library
        # DOCS: https://docs.sqlalchemy.org/en/20/
        # https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.Connection
        



SECTION: TIMER
------------------
I can use timeit package from the Standard Library to record the execution time in seconds:

from timeit import default_timer

if __name__ == '__main__':
    start: float = default_timer()
    print("Run some IO operations")
    print('elapsed time in seconds:', default_timer() - start)





SECTION: TEMP
----------------
Currently working on barchart.com marketcap on guru_model.py




==========================
PACKAGE: stock_core_update
==========================


[ price_cap_model.py ]
    * INDEPENDENT *

    This module does NOT depend on other program modules. It is to fetch current price and market cap from barchart.com

    guru_proxy_model.py depends on price_cap_model.py to get price and cap.


[ guru_proxy_model.py ]
    DEPENDS: price_cap_model.py

    guru_proxy_model.py module depends on price_cap_model.py to get current stock price and market cap.

    This module get all data from gurufocus and calculate the wealth percentage. The proxy dictionary is for database upsert in guru_database_model.py module.

    proxy_guru_process() will return a proxy dictionary containing all GURU WEB core data.

    proxy_guru_wealth() will return a proxy dictionary containing all GURU data and wealth_pc. 

[ guru_database_model.py ]
    DEPENDS: price_proxy_model.py

    This module is for database upsert, it gets data from guru_proxy_model.py module.

    I use wealth_pc variable from proxy_guru_wealth() to determine whether I will do the upsert in guru_database_model.py module. 




